library(devtools)
use_author("Kevin", "Green", email = "greenk12@tamu.edu", role = c("auth", "cre"))
?use_author
use_author("Kevin", "Green", email = "greenk12@tamu.edu", role = c("aut", "cre"))
use_author("Kevin", "Green", email = "greenk12@tamu.edu", role = c("aut", "cre"))
use_author("Kevin", "Green", email = "greenk12@tamu.edu", role = c("aut", "cre"))
use_mit_license()
use_r("one_parameter")
use_test()
args(rbeta)
args(dbeta)
use_package("stats")
load_all()
test_active_file()
load_all()
test_that("posterior dbeta works", {
expect_equal(dbeta_post(1, 10, 100), stats::dbeta(1, 10 + 1/2, 100 + 1/2))
})
?dbinom
load_all()
document()
load_all()
test_that("posterior pbeta works", {
expect_equal(pbeta_post(1, 10, 100), stats::pbeta(1, 10 + 1/2, 100 + 1/2))
})
q()
library(devtools)
document()
?rbeta
use_package("withr")
load_all()
test_active_file()
test_active_file()
stats::dbeta(1, 10 + 1/2, 90 + 1/2)
dbeta_post(1, 10, 100)
test_that("posterior dbeta works", {
expect_equal(dbeta_post(1, 10, 100), stats::dbeta(1, 10 + 1/2, 100 + 1/2))
})
test_that("posterior pbeta works", {
expect_equal(pbeta_post(1, 10, 100), stats::pbeta(1, 10 + 1/2, 100 + 1/2))
})
pbeta_post(1, 10, 100)
stats::pbeta(1, 10 + 1/2, 100 + 1/2)
test_that("posterior pbeta works", {
expect_equal(pbeta_post(0.5, 10, 100), stats::pbeta(0.5, 10 + 1/2, 100 + 1/2))
})
pbeta_post(0.5, 10, 100)
pbeta_post(0.5, 10, 20)
stats::pbeta(0.5, 10 + 1/2, 10 + 1/2)
test_that("posterior pbeta works", {
expect_equal(pbeta_post(0.5, 10, 20), stats::pbeta(0.5, 10 + 1/2, 10 + 1/2))
})
rbeta_post(1, 10, 100)
stats::rbeta(1, 10 + 1/2, 100 + 1/2)
withr::with_seed(123, {
expect_equal(rbeta_post(1, 10, 100), stats::rbeta(1, 10 + 1/2, 100 + 1/2))
})
test_that("posterior rbeta works", {
withr::with_seed(123, {
expect_equal(rbeta_post(1, 10, 100), stats::rbeta(1, 10 + 1/2, 100 + 1/2),
tolerance = 0.01)
})
})
test_that("posterior rbeta works", {
withr::with_seed(123, {
expect_equal(rbeta_post(1, 10, 20), stats::rbeta(1, 10 + 1/2, 10 + 1/2),
tolerance = 0.01)
})
})
test_that("posterior rbeta works", {
withr::with_seed(123, {
expect_equal(rbeta_post(1, 10, 20), stats::rbeta(1, 10 + 1/2, 10 + 1/2),
tolerance = 0.1)
})
})
test_that("posterior dbeta works", {
expect_equal(dbeta_post(0.5, 10, 20), stats::dbeta(0.5, 10 + 1/2, 20 + 1/2))
})
stats::dbeta(0.5, 10, 20)
stats::dbeta(0.5, 10 + 1/2, 20)
stats::dbeta(0.5, 10 + 1/2, 10 + 1/2)
stats::dbeta(0.5, 10 + 1/2, 10 + 1/2)
stats::dbeta(0.5, 10 + 1/2, 20 + 1/2)
stats::dbeta(0.5, 10 + 1/2, 10 + 1/2)
stats::dbeta(0.5, 10 + 1/2, 10 + 1/2)
dbeta_post(0.5, 10, 20)
stats::dbeta(0.5, 10 + 1/2, 10 + 1/2)
load_all()
test_that("posterior dbeta works", {
expect_equal(dbeta_post(0.5, 10, 20), stats::dbeta(0.5, 10 + 1/2, 10 + 1/2))
})
load_all()
test_that("posterior dbeta works", {
expect_equal(dbeta_post(0.5, 10, 20), stats::dbeta(0.5, 10 + 1/2, 10 + 1/2))
})
load_all()
test_that("posterior dbeta works", {
expect_equal(dbeta_post(0.5, 10, 20), stats::dbeta(0.5, 10 + 1/2, 10 + 1/2))
})
use_package("withr", "Suggests")
?dgamma
source("C:/Users/kevgr/school/fall_2023/stat_600/simplebayes/R/one_parameter.R")
load_all()
rm()
load_all()
q()

document()
check()
document()
document()
check()
check()
document()
document()
document()
load_all()
use_test()
test_that("qorm_post works", {
obs <- rnorm(100, 4, 2)
norm_post <- update_normal_parameters(
mu_prior = 1, var_prior = 1/sd(obs), obs = obs
)
expect_equal(
qnorm_post(0.1, obs), qnorm(0.1, norm_post[1], norm_post[2])
)
expect_equal(
qnorm_post(1, obs, lower.tail = TRUE),
qnorm(1, norm_post[1], norm_post[2], lower.tail = TRUE)
)
})
load_all()
use_r("normal_priors")
use_test()
obs <- rnorm(100, 4, 2)
qnorm_post(pnorm_post(seq(2, 5, by = 0.2), obs), obs)
qnorm_post(pnorm_post(seq(3, 4, by = 0.1), obs), obs)
qnorm_post(pnorm_post(seq(0, 1, 10), obs), obs)
qnorm_post(pnorm_post(seq(0, 1, length.out = 10), obs), obs)
obs <- rnorm(50)
qnorm_post(pnorm_post(seq(0, 1, length.out = 10), obs), obs)
obs
seq(0, 1, length.out = 10)
seq(0, 1, by = 0.1)
qnorm_post(pnorm_post(seq(0, 1, by = 0.1), obs), obs)
qnorm_post(seq(0, 1, by = 0.1), obs)
qnorm_post(seq(0.1, 0.9, by = 0.1), obs)
document()
load_all()
qgamma_post(x, 10, 100, "pois")
dgamma_post(x, 10, 100, "pois")
x <- seq(0, 1, by = 0.1)
dgamma_post(x, 10, 100, "pois")
qgamma_post(x, 10, 100, "pois")
test_that("qgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(qgamma_post(2, OBS, s_size, "exp"),
qgamma(2, 0 + sum(OBS), 0 + s_size))
expect_length(qgamma_post(2:5, OBS, s_size, "exp"), length(2:5))
expect_equal(qgamma_post(2, OBS, s_size, "exp", log = TRUE),
qgamma(2, 0 + sum(OBS), 0 + s_size, log = TRUE))
})
test_that("qgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(qgamma_post(0.5, OBS, s_size, "exp"),
qgamma(0.5, 0 + sum(OBS), 0 + s_size))
expect_length(
qgamma_post(seq(0.2, 0.5, by = 0.1), OBS, s_size, "exp"), length(2:5)
)
expect_equal(qgamma_post(0.2, OBS, s_size, "exp", log = TRUE),
qgamma(0.2, 0 + sum(OBS), 0 + s_size, log = TRUE))
})
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
qgamma_post(0.5, OBS, s_size, "exp")
qgamma(0.5, 0 + sum(OBS), 0 + s_size)
qgamma_post(seq(0.2, 0.5, by = 0.1), OBS, s_size, "exp")
length(2:5)
qgamma_post(0.2, OBS, s_size, "exp", log = TRUE)
test_that("qgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(qgamma_post(0.5, OBS, s_size, "exp"),
qgamma(0.5, 0 + sum(OBS), 0 + s_size))
expect_length(
qgamma_post(seq(0.2, 0.5, by = 0.1), OBS, s_size, "exp"), length(2:5)
)
expect_equal(qgamma_post(0.2, OBS, s_size, "exp", log.p = TRUE),
qgamma(0.2, 0 + sum(OBS), 0 + s_size, log.p = TRUE))
})
qgamma_post(0.2, OBS, s_size, "exp", log.p = TRUE)
qgamma(-2, 0 + sum(OBS), 0 + s_size, log.p = TRUE)
test_that("qgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(qgamma_post(0.5, OBS, s_size, "exp"),
qgamma(0.5, 0 + sum(OBS), 0 + s_size))
expect_length(
qgamma_post(seq(0.2, 0.5, by = 0.1), OBS, s_size, "exp"), length(2:5)
)
expect_equal(qgamma_post(-2, OBS, s_size, "exp", log.p = TRUE),
qgamma(-2, 0 + sum(OBS), 0 + s_size, log.p = TRUE))
})
load_all()
test_active_file()
document()
load_all()
use_test()
test_that("qbeta_post works", {
expect_error(qbeta_post(1/2, "poisson"))
expect_equal(qbeta_post(1/2, likelihood = "binom", result = 2, sample_size = 10),
qbeta(1/2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
qbeta_post(1/2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
qbeta(1/2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(qbeta_post(1/2, likelihood = "geometric", result = 2, sample_size = 10),
qbeta(1/2, 0.5 + 10, 2 + 0.5))
quants <- 1/c(2, 3, 4, 5, 2, 3)
expect_length(qbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants))
expect_equal(qbeta_post(quants, "binom", result = 3, sample_size = 10),
c(qbeta_post(quants[1], "binom", result = 3, sample_size = 10),
qbeta_post(quants[2], "binom", result = 3, sample_size = 10),
qbeta_post(quants[3], "binom", result = 3, sample_size = 10),
qbeta_post(quants[4], "binom", result = 3, sample_size = 10),
qbeta_post(quants[5], "binom", result = 3, sample_size = 10),
qbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
})
expect_error(qbeta_post(1/2, "poisson"))
qbeta_post(1/2, likelihood = "binom", result = 2, sample_size = 10)
qbeta(1/2, 0.5 + 2, 10 - 2 + 0.5)
expect_equal(
qbeta_post(1/2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
qbeta(1/2, 0.5 + 10 * 0.5, 2 + 0.5))
qbeta(1/2, 0.5 + 2, 10 - 2 + 0.5))
qbeta(1/2, 0.5 + 2, 10 - 2 + 0.5)
qbeta_post(0.5, 2, 10 "binom")
qbeta_post(0.5, 2, 10, "binom")
load_all()
test_active_file()
document()
test()
check()
use_r("gamma_priors")
document()
load_all()
use_readme_rmd()
library(simplebayes)
successes <- 20
sample_size <- 100
pbeta_post(35, successes, sample_size, likelihood = "binom")
pbeta_post(0.6, successes, sample_size, likelihood = "binom")
library(simplebayes)
successes <- 20
sample_size <- 100
pbeta_post(0.6, successes, sample_size, likelihood = "binom")
successes <- 20
sample_size <- 100
pbeta_post(0.6, successes, sample_size, likelihood = "binom")
pbeta_post(0.1:0.9, successes, sample_size, likelihood = "binom")
pbeta_post(50, successes, sample_size = sample_size, "binom")
pbeta_post(0.6, successes, sample_size = sample_size, "binom")
pbeta_post(0.1, successes, sample_size = sample_size, "binom")
pbeta(0.5, 20.5, 80.5)
dbeta(0.5, 20.5, 80.5)
pbeta(0.5, 20, 80)
pbeta(0.1, 20, 80)
pbeta(0.3, 20, 80)
pbeta(0.3, 20, 10)
pbeta(0.8, 20, 10)
pbeta(0.9, 20, 10)
pbeta_post(0.3, successes, sample_size, likelihood = "binom")
install()
document()
styler::style_pkg()
?use_vignette
use_vignette("bayesian_lm", "Bayesian Linear Model")
datasets::anscombe
life_expectancy <- read.csv("Life Expectancy Data.csv")
View(life_expectancy)
use_data(life_expectancy)
unique(life_expectancy$Country)
life_expectancy |> dplyr::filter(Country == "France")
life_expectancy |> dplyr::filter(Country == "Germany")
life_expectancy |> dplyr::filter(Country == "Germany", Year == 2008)
life_expectancy |> dplyr::filter(Year == 2008)
View(life_expectancy)
eu_cuntries <- c("Belgium", "Germany", "France", "Italy", "Luxembourg", "Netherlands", "Denmark", "Ireland", "United Kingdom of Great Britian and Northern Ireland", "Greece", "Spain", "Portugal", "Austria", "Finalnd", "Sweden", "Czech Republic", "Estonia", "Cyprus", "Latvia", "Lithuania", "Hungary", "Malta", "Poland", "Slovakia", "Slovinia", "Romainia", "Bulgaria")
life_expectancy |> dplyr::filter(Year == 2008, Country %in% eu_cuntries)
life_expectancy |> dplyr::filter(Year == 2009, Country %in% eu_cuntries)
life_expectancy |> dplyr::filter(Year == 2012, Country %in% eu_cuntries)
life_expectancy <- life_expectancy |> dplyr::filter(Year == 2012, Country %in% eu_cuntries)
life_expectancy |> dplyr::mutate(Population == ifelse(Country == "Slovakia", 5408000, Population))
life_expectancy |> dplyr::mutate(Population = ifelse(Country == "Slovakia", 5408000, Population))
life_expectancy |> dplyr::mutate(Population = ifelse(Country == "Slovakia", 5408000, Population), GDP = ifelse(Country == "Slovakia", 17498.35, GDP))
life_expectancy <- life_expectancy |> dplyr::mutate(Population = ifelse(Country == "Slovakia", 5408000, Population), GDP = ifelse(Country == "Slovakia", 17498.35, GDP))
use_data(life_expectancy, overwrite = TRUE)
as.data.frame(life_expectancy)
life_expectancy
library(tidyverse)
library(simplebayes)
life_expectancy
knitr::kable(life_expectancy, caption = "2012 EU Life Expectancies")
country_index <- seq_along(unique(life_expectancy$Country))
development_index <- ifelse(life_expectancy$Status == "Developed", 1, 2)
life_expectancy$country_index <- country_index
life_expectancy$development_index <- development_index
inputs <- life_expectancy[-c("Country", "Year", "Life.expectancy")]
inputs <- life_expectancy[, -c("Country", "Year", "Life.expectancy")]
inputs <- life_expectancy[[-c("Country", "Year", "Life.expectancy")]]
colnames(life_expectancy)
colnames(life_expectancy) %in% c("Country", "Year", "Life.expectancy")
inputs <- life_expectancy[!(colnames(life_expectancy) %in% c("Country", "Year", "Life.expectancy"))]
inputs
inputs <- as.matrix(
life_expectancy[
!(colnames(life_expectancy) %in% c("Country", "Year", "Life.expectancy"))
]
)
inputs
inputs <- as.matrix(
life_expectancy[
!(colnames(life_expectancy) %in% c("Country", "Status", "Year", "Life.expectancy"))
]
)
inputs
unwanted_columns <- c("Country", "Status", "Year", "Life.expectancy")
inputs <- as.matrix(
life_expectancy[
!(colnames(life_expectancy) %in% unwanted_columns)
]
)
inputs
expectancies <- life_expectancy$Life.expectancy
posterior <- bayes_lm(expectancies, inputs)
dim(inputs)
use_r("bayes_lm")
y <- expectancies
x <- inputs
iterations = 10000
mean_prior = 1
beta_prior = NULL
variance_prior = NULL
if (iterations <= 0) {
rlang::abort("iterations must be greater than 0")
}
if (length(y) != nrow(x)) {
rlang::abort("The length of y must equal the number of rows in x")
}
g <- length(y)
g_fraction <- g / (g + 1)
priors <- initialize_priors(y, x, g_fraction, beta_prior, variance_prior)
priors
lm(y ~ 0 + x)
summary(lm(y ~ 0 + x))$sigma
summary(lm(y ~ 0 + x))
x[, 1:10]
x[, 1:10] -> x
summary(lm(y ~ 0 + x))
names(inputs)
colnames(inputs)
dim(inputs)
lf <- read.csv("Life Expectancy Data.csv")
unique(lf$Country)
european_countries <- c("Russia", "Ukraine", "France", "Spain", "Sweden", "Germany", "Finland", "Norway", "Poland", "Italy", "United Kingdom of Great Britain and Northern Ireland", "Romania", "Belarus", "Kazakhstan", "Greece", "Bulgaria", "Iceland", "Hungary", "Portugal", "Astria", "Czech Republic", "Serbia", "Ireland", "Lithuania", "Croatia", "Bosnia and Herzegovina", "Slovakia", "Estonia", "Denmark", "Netherlands", "Switzerland", "Moldova", "Belgium", "Albania", "The former Yugoslav republic of Macedonia", "Turkey", "Slovenia", "Montenegro", "Kosovo", "Azerbaijan", "Georgia", "Luxembourg", "Andorra", "Malta", "Liechtenstein", "San Marina", "Monaco")
lf |> filter(Year == 2012)
lf |> filter(Year == 2012, ) |> na.omit()
life_expectancy <- lf |> filter(Year == 2012, ) |> na.omit()
use_data(life_expectancy, overwrite = TRUE)
knitr::kable(head(life_expectancy), caption = "2012 Life Expectancies")
unique(life_expectancy$Status)
country_index <- seq_along(unique(life_expectancy$Country))
development_index <- ifelse(life_expectancy$Status == "Developed", 1, 2)
life_expectancy$country_index <- country_index
life_expectancy$development_index <- development_index
expectancies <- life_expectancy$Life.expectancy
unwanted_columns <- c("Country", "Status", "Year", "Life.expectancy")
inputs <- as.matrix(
life_expectancy[
!(colnames(life_expectancy) %in% unwanted_columns)
]
)
posterior <- bayes_lm(expectancies, inputs)
y <- expectancies
x <- inputs
mean_prior = 1
beta_prior = NULL
variance_prior = NULL
if (iterations <= 0) {
rlang::abort("iterations must be greater than 0")
}
if (length(y) != nrow(x)) {
rlang::abort("The length of y must equal the number of rows in x")
}
g <- length(y)
g_fraction <- g / (g + 1)
priors <- initialize_priors(y, x, g_fraction, beta_prior, variance_prior)
if (ncol(x) != length(priors$beta_prior)) {
rlang::abort("Number of parameters do not match")
}
variance_posterior <- variance_post(
y, x, iterations,
g = g, mean_prior, priors$variance_prior
)
priors
X <- x
crossprod(X)
solve(crossprod(X))
dim(crossprod(X))
Matrix::nearPD(crossprod(X))
Matrix::nearPD(crossprod(X)) |> solve()
Matrix::nearPD(crossprod(X)) |> as.matrix() |> solve()
X1 <- Matrix::nearPD(crossprod(X))
X1$mat
X1$mat |> solve()
solve(Matrix::nearPD(X)$mat)
solve(Matrix::nearPD(crossprod(X))$mat)
use_package("Matrix")
?tryCatch
tryCatch(error = TRUE TRUE, FALSE)
tryCatch(error = TRUE, FALSE)
tryCatch(error = solve(X) TRUE)
tryCatch(error = solve(X), TRUE)
tryCatch(error = solve(crossprod(X)), TRUE)
tryCatch(error = function(solve(crossprod(X))), TRUE)
tryCatch(error = function(solve(crossprod(X))) TRUE)
?rlang::catch_cnd
tst <- matrix(rnorm(100, 2, 10), nrow = 10)
solve(crossprod(tst))
solve(Matrix::nearPD(crossprod(tst)))
solve(Matrix::nearPD(crossprod(tst))$mat)
all.equal(solve(crossprod(tst)), solve(Matrix::nearPD(crossprod(tst))))
all.equal(solve(crossprod(tst)), solve(Matrix::nearPD(crossprod(tst))$mat))
load_all()
test_active_file()
posterior <- bayes_lm(expectancies, inputs)
load_all()
posterior <- bayes_lm(expectancies, inputs)
x
y
if (iterations <= 0) {
rlang::abort("iterations must be greater than 0")
}
if (length(y) != nrow(x)) {
rlang::abort("The length of y must equal the number of rows in x")
}
g <- length(y)
g_fraction <- g / (g + 1)
priors <- initialize_priors(y, x, g_fraction, beta_prior, variance_prior)
if (ncol(x) != length(priors$beta_prior)) {
rlang::abort("Number of parameters do not match")
}
variance_posterior <- variance_post(
y, x, iterations,
g = g, mean_prior, priors$variance_prior
)
variance_posterior
priors
g_frac <- g / (1 + g)
hat_matrix <- X %*% tcrossprod(solve(Matrix::nearPD(crossprod(X))$mat), X)
SSRg <- crossprod(Y, diag(g) - g_frac * hat_matrix) %*% Y
Y <- y
hat_matrix <- X %*% tcrossprod(solve(Matrix::nearPD(crossprod(X))$mat), X)
SSRg <- crossprod(Y, diag(g) - g_frac * hat_matrix) %*% Y
1 / stats::rgamma(iters, (mu_prior + g) / 2, (s2_prior * mu_prior + SSRg) / 2)
iters <- 100
1 / stats::rgamma(iters, (mu_prior + g) / 2, (s2_prior * mu_prior + SSRg) / 2)
install()
library(simplebayes)
posterior <- bayes_lm(expectancies, inputs)
bayes_lm
variance_posterior
variance_posterior <- variance_post(
y, x, iterations,
g = g, mean_prior, priors$variance_prior
)
load_all()
variance_posterior <- variance_post(
y, x, iterations,
g = g, mean_prior, priors$variance_prior
)
q()
library(devtools)
load_all()
library(tidyverse)
library(simplebayes)
country_index <- seq_along(unique(life_expectancy$Country))
development_index <- ifelse(life_expectancy$Status == "Developed", 1, 2)
life_expectancy$country_index <- country_index
life_expectancy$development_index <- development_index
expectancies <- life_expectancy$Life.expectancy
unwanted_columns <- c("Country", "Status", "Year", "Life.expectancy")
inputs <- as.matrix(
life_expectancy[
!(colnames(life_expectancy) %in% unwanted_columns)
]
)
posterior <- bayes_lm(expectancies, inputs)
y <- expectancies
x <- inputs
g <- length(y)
g_fraction <- g / (g + 1)
priors <- initialize_priors(y, x, g_fraction, beta_prior, variance_prior)
if (ncol(x) != length(priors$beta_prior)) {
rlang::abort("Number of parameters do not match")
}
variance_posterior <- variance_post(
y, x, iterations,
g = g, mean_prior, priors$variance_prior
)
iterations = 10000
mean_prior = 1
beta_prior = NULL
variance_prior = NULL
priors <- initialize_priors(y, x, g_fraction, beta_prior, variance_prior)
priors
variance_posterior <- variance_post(
y, x, iterations,
g = g, mean_prior, priors$variance_prior
)
s2_prior <- priors$variance_prior
mu_prior <- mean_prior
iters <- iterations
g_frac <- g / (1 + g)
hat_matrix <- X %*% tcrossprod(solve(Matrix::nearPD(crossprod(X))$mat), X)
Y <- y
X <- x
g_frac <- g / (1 + g)
hat_matrix <- X %*% tcrossprod(solve(Matrix::nearPD(crossprod(X))$mat), X)
SSRg <- crossprod(Y, diag(g) - g_frac * hat_matrix) %*% Y
1 / stats::rgamma(iters, (mu_prior + g) / 2, (s2_prior * mu_prior + SSRg) / 2)
mu_prior + g
(mu_prior + g)
(mu_prior + g)/2
s2_prior * mu_prior + SSRg
hat_matrix
g_frac
diag(g) - g_frac * hat_matrix
crossprod(Y, diag(g) - g_frac * hat_matrix)
crossprod(Y, diag(g) - g_frac * hat_matrix) %*% Y
diag(g)
g
?diag
diag(g, g)
SSRg <- crossprod(Y, diag(g, g) - g_frac * hat_matrix) %*% Y
SSRg
1 / stats::rgamma(iters, (mu_prior + g) / 2, (s2_prior * mu_prior + SSRg) / 2)
load_all()
posterior <- bayes_lm(expectancies, inputs)
bayes_lm(y, x)
remove.packages("simplebayes")
install()
library(simplebayes)
posterior <- bayes_lm(expectancies, inputs)
posterior <- bayes_lm(expectancies, inputs)
bayes_lm(expectancies, inputs)
simplebayes:::variance_post()
simplebayes:::variance_post
load_all()
posterior <- bayes_lm(expectancies, inputs)
posterior
traceplot(posterior)
colnames(x)
load_all()
use_test()
test_that("bayes_lm works", {
Y <- rnorm(100, 1, 3)
X <- matrix(rnorm(1000, 2, 3), nrow = 100)
expect_error(bayes_lm(rnorm(10), matrix(0, nrow = 9)))
expect_error(bayes_lm(Y, X, iterations = 0))
expect_error(bayes_lm(Y, X, iterations = -100))
expect_error(bayes_lm(Y, X, beta_prior = runif(9, 0, 4)))
expect_equal(dim(bayes_lm(Y, X, iterations = 100)), c(100, ncol(X) + 1))
colnames(X) <- paste0("name", seq_len(ncol(X)))
expect_equal(colnames(bayes_lm(Y, X, iterations = 100)), colnames(X))
})
test_that("bayes_lm works", {
Y <- rnorm(100, 1, 3)
X <- matrix(rnorm(1000, 2, 3), nrow = 100)
expect_error(bayes_lm(rnorm(10), matrix(0, nrow = 9)))
expect_error(bayes_lm(Y, X, iterations = 0))
expect_error(bayes_lm(Y, X, iterations = -100))
expect_error(bayes_lm(Y, X, beta_prior = runif(9, 0, 4)))
expect_equal(dim(bayes_lm(Y, X, iterations = 100)), c(100, ncol(X) + 1))
colnames(X) <- paste0("name", seq_len(ncol(X)))
expect_equal(colnames(bayes_lm(Y, X, iterations = 100)), c(colnames(X), "variance"))
})
load_all()
posterior <- bayes_lm(expectancies, inputs, iterations = 10000)
traceplot(posterior)
unique(life_expectancy$country_index)
unique(life_expectancy$development_index)
colMeans(posterior)
apply(posterior, 2, quantile, prob = c(0.05, 0.95))
load_all()
test_that("credible intervals compute", {
Y <- rnorm(100, 1, 3)
X <- matrix(rnorm(1000, 2, 3), nrow = 100)
out <- bayes_lm(Y, X, iterations = 100)
expect_equal(credible_itervals(out), apply(out, 2, quantile, prob = c(0.05, 0.95)))
})
test_that("credible intervals compute", {
Y <- rnorm(100, 1, 3)
X <- matrix(rnorm(1000, 2, 3), nrow = 100)
out <- bayes_lm(Y, X, iterations = 100)
expect_equal(
credible_itervals(out), apply(out, 2, quantile, prob = c(0.05, 0.95))
)
expect_equal(
credible_itervals(out, level = 0.95),
apply(out, 2, quantile, prob = c(0.025, 0.975))
)
})
load_all()
document()
credible_itervals(posterior)
install()
q()

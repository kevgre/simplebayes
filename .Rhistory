expect_error(pbeta_post(2, "poisson"))
expect_equal(pbeta_post(2, likelihood = "binom", result = 2, s_size = 10),
pbeta(2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(pbeta_post(2, likelihood = "nbinom", result = 2, s_size = 10, f_rate = 0.5),
pbeta(2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(pbeta_post(2, likelihood = "geometric", result = 2, s_size = 10),
pbeta(2, 0.5 + 10, 2 + 0.5))
quants <- c(2, 3, 4, 5, 2, 3)
expect_length(pbeta_post(quants, "binom", result = 3, s_size = 10), length(quants))
expect_equal(pbeta_post(quants, "binom", result = 3, s_size = 10),
c(pbeta_post(quants[1], "binom", result = 3, s_size = 10),
pbeta_post(quants[2], "binom", result = 3, s_size = 10),
pbeta_post(quants[3], "binom", result = 3, s_size = 10),
pbeta_post(quants[4], "binom", result = 3, s_size = 10),
pbeta_post(quants[5], "binom", result = 3, s_size = 10),
pbeta_post(quants[6], "binom", result = 3, s_size = 10)))
})
load_all()
test_that("pbeta_post works", {
expect_error(pbeta_post(2, "poisson"))
expect_equal(pbeta_post(2, likelihood = "binom", result = 2, s_size = 10),
pbeta(2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(pbeta_post(2, likelihood = "nbinom", result = 2, s_size = 10, f_rate = 0.5),
pbeta(2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(pbeta_post(2, likelihood = "geometric", result = 2, s_size = 10),
pbeta(2, 0.5 + 10, 2 + 0.5))
quants <- c(2, 3, 4, 5, 2, 3)
expect_length(pbeta_post(quants, "binom", result = 3, s_size = 10), length(quants))
expect_equal(pbeta_post(quants, "binom", result = 3, s_size = 10),
c(pbeta_post(quants[1], "binom", result = 3, s_size = 10),
pbeta_post(quants[2], "binom", result = 3, s_size = 10),
pbeta_post(quants[3], "binom", result = 3, s_size = 10),
pbeta_post(quants[4], "binom", result = 3, s_size = 10),
pbeta_post(quants[5], "binom", result = 3, s_size = 10),
pbeta_post(quants[6], "binom", result = 3, s_size = 10)))
})
expect_equal(withr::with_seed(123, rbeta_post(2, likelihood = "binom", result = 2, s_size = 10)),
withr::with_seed(123, rbeta(2, 0.5 + 2, 10 - 2 + 0.5)))
load_all()
expect_equal(withr::with_seed(123, rbeta_post(2, likelihood = "binom", result = 2, s_size = 10)),
withr::with_seed(123, rbeta(2, 0.5 + 2, 10 - 2 + 0.5)))
rbeta(2, 0.5 + 2, 10 - 2 + 0.5)
rbeta_post(2, likelihood = "binom", result = 2, s_size = 10)
load_all()
rbeta_post(2, likelihood = "binom", result = 2, s_size = 10)
expect_equal(withr::with_seed(123, rbeta_post(2, likelihood = "binom", result = 2, s_size = 10)),
withr::with_seed(123, rbeta(2, 0.5 + 2, 10 - 2 + 0.5)))
test_that("rbeta_post works", {
expect_error(rbeta_post(2, "poisson"))
expect_equal(withr::with_seed(123, rbeta_post(2, likelihood = "binom", result = 2, s_size = 10)),
withr::with_seed(123, rbeta(2, 0.5 + 2, 10 - 2 + 0.5)))
expect_equal(withr::with_seed(123, rbeta_post(2, likelihood = "nbinom", result = 2, s_size = 10, f_rate = 0.5)),
withr::with_seed(123, rbeta(2, 0.5 + 10 * 0.5, 2 + 0.5)))
expect_equal(withr::with_seed(123, rbeta_post(2, likelihood = "geometric", result = 2, s_size = 10)),
withr::with_seed(123, rbeta(2, 0.5 + 10, 2 + 0.5)))
})
test_that("rbeta_post works", {
expect_error(rbeta_post(2, "poisson"))
expect_equal(
withr::with_seed(
123, rbeta_post(2, likelihood = "binom", result = 2, s_size = 10)),
withr::with_seed(123, rbeta(2, 0.5 + 2, 10 - 2 + 0.5))
)
expect_equal(
withr::with_seed(
123,
rbeta_post(
2, likelihood = "nbinom", result = 2, s_size = 10, f_rate = 0.5)
),
withr::with_seed(123, rbeta(2, 0.5 + 10 * 0.5, 2 + 0.5))
)
expect_equal(
withr::with_seed(
123, rbeta_post(2, likelihood = "geometric", result = 2, s_size = 10)),
withr::with_seed(123, rbeta(2, 0.5 + 10, 2 + 0.5))
)
})
load_all()
use_r("gamma_priors")
use_test()
use_test()
load_all()
test_active_file()
load_all()
test_active_file()
1/(sum(1:20)) == sum(1/1:20)
sum(1/1:20)
sum(1/(1:20))
1/sum(1:20)
load_all()
load_all()
test_that("gamma parameters update", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(update_gamma_parameters(1, 1, "pois", obs = OBS, sample_size = s_size),
c(1 + sum(OBS), 1 + s_size))
})
test_that("gamma parameters update", {
alpha_prior <- 1
beta_prior <- 1
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
a_obs <- 3
likelihoods <- c("pois", "exp", "gamma", "invgamma")
res <- matrix(c(alpha_prior + sum(OBS), beta_prior + s_size,
alpha_prior + sum(OBS), beta_prior + s_size,
alpha_prior + s_size * a_obs, beta_prior + sum(obs),
alpha_prior + s_size * a_obs, beta_prior + sum(1 / obs)),
byrow = TRUE)
for (i in seq_along(likelihoods)) {
expect_equal(
update_gamma_parameters(
alpha_prior, beta_prior, likelihoods[i], obs = OBS, sample_size = s_size,
a_obs = a_obs),
res[i, ])
}
})
test_that("gamma parameters update", {
alpha_prior <- 1
beta_prior <- 1
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
a_obs <- 3
likelihoods <- c("pois", "exp", "gamma", "invgamma")
res <- matrix(c(alpha_prior + sum(OBS), beta_prior + s_size,
alpha_prior + sum(OBS), beta_prior + s_size,
alpha_prior + s_size * a_obs, beta_prior + sum(OBS),
alpha_prior + s_size * a_obs, beta_prior + sum(1 / OBS)),
byrow = TRUE)
for (i in seq_along(likelihoods)) {
expect_equal(
update_gamma_parameters(
alpha_prior, beta_prior, likelihoods[i], obs = OBS, sample_size = s_size,
a_obs = a_obs),
res[i, ])
}
})
alpha_prior <- 1
beta_prior <- 1
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
a_obs <- 3
likelihoods <- c("pois", "exp", "gamma", "invgamma")
res <- matrix(c(alpha_prior + sum(OBS), beta_prior + s_size,
alpha_prior + sum(OBS), beta_prior + s_size,
alpha_prior + s_size * a_obs, beta_prior + sum(OBS),
alpha_prior + s_size * a_obs, beta_prior + sum(1 / OBS)),
byrow = TRUE, nrow = 4)
res
test_that("gamma parameters update", {
alpha_prior <- 1
beta_prior <- 1
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
a_obs <- 3
likelihoods <- c("pois", "exp", "gamma", "invgamma")
res <- matrix(c(alpha_prior + sum(OBS), beta_prior + s_size,
alpha_prior + sum(OBS), beta_prior + s_size,
alpha_prior + s_size * a_obs, beta_prior + sum(OBS),
alpha_prior + s_size * a_obs, beta_prior + sum(1 / OBS)),
byrow = TRUE, nrow = 4)
for (i in seq_along(likelihoods)) {
expect_equal(
update_gamma_parameters(
alpha_prior, beta_prior, likelihoods[i], obs = OBS, sample_size = s_size,
a_obs = a_obs),
res[i, ])
}
})
rm(list = ls())
test_that("dgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(dgamma_post(2, OBS, s_size, "pois"),
dgamma(2, 1 + sum(OBS), 1 + s_size))
})
load_all()
load_all()
test_that("dgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(dgamma_post(2, OBS, s_size, "pois"),
dgamma(2, 1 + sum(OBS), 1 + s_size))
})
test_that("dgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(dgamma_post(2, OBS, s_size, "pois"),
dgamma(2, 1 + sum(OBS), 1 + s_size))
expect_length(dgamma_post(2:5, OBS, s_size, "pois"), length(2:5))
})
load_all()
load_all()
load_all()
test_that("dgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(dgamma_post(2, OBS, s_size, "pois"),
dgamma(2, 1 + sum(OBS), 1 + s_size))
expect_length(dgamma_post(2:5, OBS, s_size, "pois"), length(2:5))
expect_equal(dgamma_post(2, OBS, s_size, "pois", log = TRUE),
dgamma(2, 1 + sum(OBS), 1 + s_size, log = TRUE))
})
load_all()
load_all()
test_that("pgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(dgamma_post(2, OBS, s_size, "exp"),
dgamma(2, 1 + sum(OBS), 1 + s_size))
expect_length(dgamma_post(2:5, OBS, s_size, "exp"), length(2:5))
expect_equal(dgamma_post(2, OBS, s_size, "exp", log = TRUE),
dgamma(2, 1 + sum(OBS), 1 + s_size, log = TRUE))
})
load_all()
load_all()
test_that("pgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(withr::with_seed(123, dgamma_post(2, OBS, s_size, "gamma")),
withr::with_seed(123, rgamma(2, 1 + sum(OBS), 1 + s_size)))
})
test_that("pgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(withr::with_seed(123, rgamma_post(2, OBS, s_size, "gamma")),
withr::with_seed(123, rgamma(2, 1 + sum(OBS), 1 + s_size)))
})
load_all()
test_that("pgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(withr::with_seed(123, rgamma_post(2, OBS, s_size, "gamma")),
withr::with_seed(123, rgamma(2, 1 + sum(OBS), 1 + s_size)))
})
test_that("pgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(withr::with_seed(123, rgamma_post(2, OBS, s_size, "gamma")),
withr::with_seed(123, rgamma(2, 1 + s_size * 0.8, 1 + sum(OBS))))
})
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
rgamma(2, 1 + s_size * 0.8, 1 + sum(OBS)
)
rgamma(2, 1 + s_size * 0.8, 1 + sum(OBS))
test_that("pgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(withr::with_seed(123, rgamma_post(2, OBS, s_size, "gamma", alpha_observed = 0.8)),
withr::with_seed(123, rgamma(2, 1 + s_size * 0.8, 1 + sum(OBS))))
})
load_all()
load_all()
test_that("pgamma_post works", {
s_size <- 10
OBS <- sample(1:5, s_size, TRUE)
expect_equal(pgamma_post(2, OBS, s_size, "exp"),
pgamma(2, 1 + sum(OBS), 1 + s_size))
expect_length(pgamma_post(2:5, OBS, s_size, "exp"), length(2:5))
expect_equal(pgamma_post(2, OBS, s_size, "exp", log = TRUE),
pgamma(2, 1 + sum(OBS), 1 + s_size, log = TRUE))
})
load_all()
load_all()
load_all()
test()
?Distributions
load_all()
load_all()
test_active_file()
load_all()
load_all()
load_all()
test_active_file()
test_that("beta paramters updated", {
expect_equal(
update_beta_parameters(0.5, 0.5, "binom", res = 2, s_size = 10),
c(2.5, 8.5))
expect_equal(
update_beta_parameters(
0.5, 0.5, "nbinom", res = 2, s_size = 10, f_rate = 0.5
),
c(0.5 + 10 * 0.5, 0.5 + 2)
)
expect_equal(
update_beta_parameters(0.5, 0.5, "geometric", res = 2, s_size = 10),
c(0.5 + 10, 0.5 + 2)
)
})
test_that("dbeta_post works", {
expect_error(dbeta_post(2, "poisson"))
expect_equal(dbeta_post(2, likelihood = "binom", result = 2, s_size = 10),
dbeta(2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
dbeta_post(2, likelihood = "nbinom", result = 2, s_size = 10, f_rate = 0.5),
dbeta(2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(dbeta_post(2, likelihood = "geometric", result = 2, s_size = 10),
dbeta(2, 0.5 + 10, 2 + 0.5))
quants <- c(2, 3, 4, 5, 2, 3)
expect_length(
dbeta_post(quants, "binom", result = 3, s_size = 10), length(quants)
)
expect_equal(dbeta_post(quants, "binom", result = 3, s_size = 10),
c(dbeta_post(quants[1], "binom", result = 3, s_size = 10),
dbeta_post(quants[2], "binom", result = 3, s_size = 10),
dbeta_post(quants[3], "binom", result = 3, s_size = 10),
dbeta_post(quants[4], "binom", result = 3, s_size = 10),
dbeta_post(quants[5], "binom", result = 3, s_size = 10),
dbeta_post(quants[6], "binom", result = 3, s_size = 10)))
})
load_all()
test_active_file()
load_all()
test_active_file()
load_all()
test_active_file()
test_that("dbeta_post works", {
expect_error(dbeta_post(2, "poisson"))
expect_equal(dbeta_post(2, likelihood = "binom", result = 2, sample_size = 10),
dbeta(2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
dbeta_post(2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
dbeta(2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(dbeta_post(2, likelihood = "geometric", result = 2, sample_size = 10),
dbeta(2, 0.5 + 10, 2 + 0.5))
quants <- c(2, 3, 4, 5, 2, 3)
expect_length(
dbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants)
)
expect_equal(dbeta_post(quants, "binom", result = 3, sample_size = 10),
c(dbeta_post(quants[1], "binom", result = 3, sample_size = 10),
dbeta_post(quants[2], "binom", result = 3, sample_size = 10),
dbeta_post(quants[3], "binom", result = 3, sample_size = 10),
dbeta_post(quants[4], "binom", result = 3, sample_size = 10),
dbeta_post(quants[5], "binom", result = 3, sample_size = 10),
dbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
expect_equal(dbeta_post(dbeta_post(2, likelihood = "binom", result = 2, sample_size = 10, log = TRUE),
dbeta(2, 0.5 + 2, 10 - 2 + 0.5, log = TRUE)))
})
test_that("dbeta_post works", {
expect_error(dbeta_post(2, "poisson"))
expect_equal(dbeta_post(2, likelihood = "binom", result = 2, sample_size = 10),
dbeta(2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
dbeta_post(2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
dbeta(2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(dbeta_post(2, likelihood = "geometric", result = 2, sample_size = 10),
dbeta(2, 0.5 + 10, 2 + 0.5))
quants <- c(2, 3, 4, 5, 2, 3)
expect_length(
dbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants)
)
expect_equal(dbeta_post(quants, "binom", result = 3, sample_size = 10),
c(dbeta_post(quants[1], "binom", result = 3, sample_size = 10),
dbeta_post(quants[2], "binom", result = 3, sample_size = 10),
dbeta_post(quants[3], "binom", result = 3, sample_size = 10),
dbeta_post(quants[4], "binom", result = 3, sample_size = 10),
dbeta_post(quants[5], "binom", result = 3, sample_size = 10),
dbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
expect_equal(dbeta_post(dbeta_post(2, likelihood = "binom", result = 2, sample_size = 10, log = TRUE),
dbeta(2, 0.5 + 2, 10 - 2 + 0.5, log = TRUE)))
})
test_that("dbeta_post works", {
expect_error(dbeta_post(2, "poisson"))
expect_equal(dbeta_post(2, likelihood = "binom", result = 2, sample_size = 10),
dbeta(2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
dbeta_post(2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
dbeta(2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(dbeta_post(2, likelihood = "geometric", result = 2, sample_size = 10),
dbeta(2, 0.5 + 10, 2 + 0.5))
quants <- c(2, 3, 4, 5, 2, 3)
expect_length(
dbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants)
)
expect_equal(dbeta_post(quants, "binom", result = 3, sample_size = 10),
c(dbeta_post(quants[1], "binom", result = 3, sample_size = 10),
dbeta_post(quants[2], "binom", result = 3, sample_size = 10),
dbeta_post(quants[3], "binom", result = 3, sample_size = 10),
dbeta_post(quants[4], "binom", result = 3, sample_size = 10),
dbeta_post(quants[5], "binom", result = 3, sample_size = 10),
dbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
# expect_equal(dbeta_post(dbeta_post(2, likelihood = "binom", result = 2, sample_size = 10, log = TRUE),
#                         dbeta(2, 0.5 + 2, 10 - 2 + 0.5, log = TRUE)))
})
test_that("dbeta_post works", {
expect_error(dbeta_post(2, "poisson"))
expect_equal(dbeta_post(2, likelihood = "binom", result = 2, sample_size = 10),
dbeta(2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
dbeta_post(2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
dbeta(2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(dbeta_post(2, likelihood = "geometric", result = 2, sample_size = 10),
dbeta(2, 0.5 + 10, 2 + 0.5))
quants <- c(2, 3, 4, 5, 2, 3)
expect_length(
dbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants)
)
expect_equal(dbeta_post(quants, "binom", result = 3, sample_size = 10),
c(dbeta_post(quants[1], "binom", result = 3, sample_size = 10),
dbeta_post(quants[2], "binom", result = 3, sample_size = 10),
dbeta_post(quants[3], "binom", result = 3, sample_size = 10),
dbeta_post(quants[4], "binom", result = 3, sample_size = 10),
dbeta_post(quants[5], "binom", result = 3, sample_size = 10),
dbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
expect_equal(dbeta_post(2, likelihood = "binom", result = 2, sample_size = 10, log = TRUE),
dbeta(2, 0.5 + 2, 10 - 2 + 0.5, log = TRUE))
})
dbeta(2, 0.5 + 2, 10 - 2 + 0.5, log = TRUE)
dbeta(2, 0.5 + 2, 10 - 2 + 0.5, log = FALSE)
dbeta(3, 0.5 + 2, 10 - 2 + 0.5, log = FALSE)
dbeta(5, 0.5 + 2, 10 - 2 + 0.5, log = FALSE)
dbeta(6, 0.5 + 2, 10 - 2 + 0.5, log = FALSE)
dbeta(0.5, 0.5 + 2, 10 - 2 + 0.5, log = FALSE)
dbeta(0.5, 0.5 + 2, 10 - 2 + 0.5, log = TRUE)
load_all()
test_active_file()
dbeta_post(1/2, likelihood = "binom", result = 2, sample_size = 10)
dbeta(1/2, 0.5 + 2, 10 - 2 + 0.5)
test_that("dbeta_post works", {
expect_error(dbeta_post(1/2, "poisson"))
expect_equal(dbeta_post(1/2, likelihood = "binom", result = 2, sample_size = 10),
dbeta(1/2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
dbeta_post(1/2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
dbeta(1/2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(dbeta_post(2, likelihood = "geometric", result = 2, sample_size = 10),
dbeta(1/2, 0.5 + 10, 2 + 0.5))
quants <- 1/c(2, 3, 4, 5, 2, 3)
expect_length(
dbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants)
)
expect_equal(dbeta_post(quants, "binom", result = 3, sample_size = 10),
c(dbeta_post(quants[1], "binom", result = 3, sample_size = 10),
dbeta_post(quants[2], "binom", result = 3, sample_size = 10),
dbeta_post(quants[3], "binom", result = 3, sample_size = 10),
dbeta_post(quants[4], "binom", result = 3, sample_size = 10),
dbeta_post(quants[5], "binom", result = 3, sample_size = 10),
dbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
expect_equal(dbeta_post(0.5, likelihood = "binom", result = 2, sample_size = 10, log = TRUE),
dbeta(0.5, 0.5 + 2, 10 - 2 + 0.5, log = TRUE))
})
dbeta_post(0.5, likelihood = "binom", result = 2, sample_size = 10, log = TRUE)
load_all()
test_that("dbeta_post works", {
expect_error(dbeta_post(1/2, "poisson"))
expect_equal(dbeta_post(1/2, likelihood = "binom", result = 2, sample_size = 10),
dbeta(1/2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
dbeta_post(1/2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
dbeta(1/2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(dbeta_post(2, likelihood = "geometric", result = 2, sample_size = 10),
dbeta(1/2, 0.5 + 10, 2 + 0.5))
quants <- 1/c(2, 3, 4, 5, 2, 3)
expect_length(
dbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants)
)
expect_equal(dbeta_post(quants, "binom", result = 3, sample_size = 10),
c(dbeta_post(quants[1], "binom", result = 3, sample_size = 10),
dbeta_post(quants[2], "binom", result = 3, sample_size = 10),
dbeta_post(quants[3], "binom", result = 3, sample_size = 10),
dbeta_post(quants[4], "binom", result = 3, sample_size = 10),
dbeta_post(quants[5], "binom", result = 3, sample_size = 10),
dbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
expect_equal(dbeta_post(0.5, likelihood = "binom", result = 2, sample_size = 10, log = TRUE),
dbeta(0.5, 0.5 + 2, 10 - 2 + 0.5, log = TRUE))
})
test_that("dbeta_post works", {
expect_error(dbeta_post(1/2, "poisson"))
expect_equal(dbeta_post(1/2, likelihood = "binom", result = 2, sample_size = 10),
dbeta(1/2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
dbeta_post(1/2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
dbeta(1/2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(dbeta_post(1/2, likelihood = "geometric", result = 2, sample_size = 10),
dbeta(1/2, 0.5 + 10, 2 + 0.5))
quants <- 1/c(2, 3, 4, 5, 2, 3)
expect_length(
dbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants)
)
expect_equal(dbeta_post(quants, "binom", result = 3, sample_size = 10),
c(dbeta_post(quants[1], "binom", result = 3, sample_size = 10),
dbeta_post(quants[2], "binom", result = 3, sample_size = 10),
dbeta_post(quants[3], "binom", result = 3, sample_size = 10),
dbeta_post(quants[4], "binom", result = 3, sample_size = 10),
dbeta_post(quants[5], "binom", result = 3, sample_size = 10),
dbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
expect_equal(dbeta_post(0.5, likelihood = "binom", result = 2, sample_size = 10, log = TRUE),
dbeta(0.5, 0.5 + 2, 10 - 2 + 0.5, log = TRUE))
})
test_that("pbeta_post works", {
expect_error(pbeta_post(1/2, "poisson"))
expect_equal(pbeta_post(1/2, likelihood = "binom", result = 2, sample_size = 10),
pbeta(1/2, 0.5 + 2, 10 - 2 + 0.5))
expect_equal(
pbeta_post(1/2, likelihood = "nbinom", result = 2, sample_size = 10, failure_rate = 0.5),
pbeta(1/2, 0.5 + 10 * 0.5, 2 + 0.5))
expect_equal(pbeta_post(1/2, likelihood = "geometric", result = 2, sample_size = 10),
pbeta(1/2, 0.5 + 10, 2 + 0.5))
quants <- 1/c(2, 3, 4, 5, 2, 3)
expect_length(pbeta_post(quants, "binom", result = 3, sample_size = 10), length(quants))
expect_equal(pbeta_post(quants, "binom", result = 3, sample_size = 10),
c(pbeta_post(quants[1], "binom", result = 3, sample_size = 10),
pbeta_post(quants[2], "binom", result = 3, sample_size = 10),
pbeta_post(quants[3], "binom", result = 3, sample_size = 10),
pbeta_post(quants[4], "binom", result = 3, sample_size = 10),
pbeta_post(quants[5], "binom", result = 3, sample_size = 10),
pbeta_post(quants[6], "binom", result = 3, sample_size = 10)))
})
load_all()
test_active_file()
